"use strict";(globalThis.webpackChunkbeacon_docs=globalThis.webpackChunkbeacon_docs||[]).push([[445],{10219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"getting-started/advanced-example","title":"Advanced Example","description":"The following example will show:","source":"@site/docs/getting-started/advanced-example.mdx","sourceDirName":"getting-started","slug":"/getting-started/advanced-example","permalink":"/getting-started/advanced-example","draft":false,"unlisted":false,"editUrl":"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/getting-started/advanced-example.mdx","tags":[],"version":"current","frontMatter":{"title":"Advanced Example"},"sidebar":"docs","previous":{"title":"Simple Example","permalink":"/getting-started/simple-example"},"next":{"title":"Subscribe to ACTIVE_ACCOUNT_SET Advanced Example","permalink":"/getting-started/subscribe-to-active-account"}}');var a=n(74848),r=n(28453),s=n(11470),l=n(19365);const i={title:"Advanced Example"},c=void 0,u={},d=[];function p(e){const t={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"The following example will show:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"How to set the correct color mode"}),"\n",(0,a.jsx)(t.li,{children:"How to connect a dApp to a wallet"}),"\n",(0,a.jsx)(t.li,{children:"How to re-use an existing connection after a page refreshed"}),"\n",(0,a.jsx)(t.li,{children:"How to send an operation request"}),"\n",(0,a.jsx)(t.li,{children:'How to "disconnect" a wallet'}),"\n"]}),"\n",(0,a.jsxs)(s.A,{groupId:"beaconOrTaquitoAE",defaultValue:"beacon",values:[{label:"Beacon",value:"beacon"},{label:"Taquito",value:"taquito"}],children:[(0,a.jsx)(l.A,{value:"beacon",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:"live",live:!0,children:'// beacon advanced example\nimport {\n  ColorMode,\n  DAppClient,\n  Network,\n  NetworkType,\n  TezosOperationType,\n} from "@airgap/beacon-sdk";\n\n// Set the network (Mainnet is default)\nconst network: Network = { type: NetworkType.MAINNET };\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({\n  name: "Beacon Docs",\n  network: network,\n});\n\nlet myAddress: string | undefined;\n\n// OPTIONAL: Set the color mode\n// Read the current theme of the docs page from local storage. This depends on your dApp state\nconst theme = localStorage.getItem("theme");\nawait dAppClient.setColorMode(\n  theme === "dark" ? ColorMode.DARK : ColorMode.LIGHT,\n);\n\n// This code should be called every time the page is loaded or refreshed to see if the user has already connected to a wallet.\nconst activeAccount = await dAppClient.getActiveAccount();\nif (activeAccount) {\n  // If defined, the user is connected to a wallet.\n  // You can now do an operation request, sign request, or send another permission request to switch wallet\n  console.log("Already connected:", activeAccount.address);\n\n  // You probably want to show the address in your UI somewhere.\n  myAddress = activeAccount.address;\n} else {\n  // The user is NOT connected to a wallet.\n\n  // The following permission request should not be called on pageload,\n  // it should be triggered when the user clicks on a "connect" button on your page.\n  // This will trigger the pairing alert UI where the user can select which wallet to pair.\n  const permissions = await dAppClient.requestPermissions({\n    network: network,\n  });\n  console.log("New connection: ", permissions.address);\n  myAddress = permissions.address;\n}\n\n// At this point we are connected to an account.\n// Let\'s send a simple transaction to the wallet that sends 1 mutez to ourselves.\nconst response = await dAppClient.requestOperation({\n  operationDetails: [\n    {\n      kind: TezosOperationType.TRANSACTION,\n      destination: myAddress, // Send to ourselves\n      amount: "1", // Amount in mutez, the smallest unit in Tezos\n    },\n  ],\n});\n\nconsole.log("Operation Hash:", response.transactionHash);\n\n// Let\'s generate a link to see the transaction on a block explorer\nconst explorerLink = await dAppClient.blockExplorer.getTransactionLink(\n  response.transactionHash,\n  network,\n);\n\nconsole.log("Block Explorer:", explorerLink);\n\n// If you want to "disconnect" a wallet, clear the active account.\n// This means the next time the active account is checked or a permission request is triggered, it will be like it\'s the users first interaction.\nawait dAppClient.clearActiveAccount();\n'})})}),(0,a.jsx)(l.A,{value:"taquito",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:"live",live:!0,children:'// taquito advanced example\nimport { TezosToolkit } from "@taquito/taquito";\nimport { BeaconWallet } from "@taquito/beacon-wallet";\nimport {\n  ColorMode,\n  Network,\n  NetworkType,\n  TezosOperationType,\n} from "@airgap/beacon-sdk";\n\n// Set the network (Mainnet is default)\nconst network: Network = { type: NetworkType.MAINNET };\n\nconst Tezos = new TezosToolkit("https://mainnet.api.tez.ie");\nconst wallet = new BeaconWallet({\n  name: "Beacon Docs",\n  network: network,\n}); // Takes the same arguments as the DAppClient constructor\n\nTezos.setWalletProvider(wallet);\n\nlet myAddress: string | undefined;\n\n// OPTIONAL: Set the color mode\n// Read the current theme of the docs page from local storage. This depends on your dApp state\nconst theme = localStorage.getItem("theme");\nawait wallet.client.setColorMode(\n  theme === "dark" ? ColorMode.DARK : ColorMode.LIGHT,\n);\n\n// This code should be called every time the page is loaded or refreshed to see if the user has already connected to a wallet.\nconst activeAccount = await wallet.client.getActiveAccount();\nif (activeAccount) {\n  // If defined, the user is connected to a wallet.\n  // You can now do an operation request, sign request, or send another permission request to switch wallet\n  console.log("Already connected:", activeAccount.address);\n\n  // You probably want to show the address in your UI somewhere.\n  myAddress = activeAccount.address;\n} else {\n  // The user is NOT connected to a wallet.\n\n  // The following permission request should not be called on pageload,\n  // it should be triggered when the user clicks on a "connect" button on your page.\n  // This will trigger the pairing alert UI where the user can select which wallet to pair.\n  wallet.requestPermissions({\n    network: network,\n  });\n  myAddress = await wallet.getPKH();\n  console.log("New connection: ", myAddress);\n}\n\n// At this point we are connected to an account.\n// Let\'s send a simple transaction to the wallet that sends 1 mutez to ourselves.\nconst hash = await wallet.sendOperations([\n  {\n    kind: TezosOperationType.TRANSACTION,\n    destination: myAddress, // Send to ourselves\n    amount: "1", // Amount in mutez, the smallest unit in Tezos\n  },\n]);\n\nconsole.log("Operation Hash:", hash);\n\n// Let\'s generate a link to see the transaction on a block explorer\nconst explorerLink = await wallet.client.blockExplorer.getTransactionLink(\n  hash,\n  network,\n);\n\nconsole.log("Block Explorer:", explorerLink);\n\n// If you want to "disconnect" a wallet, clear the active account.\n// This means the next time the active account is checked or a permission request is triggered, it will be like it\'s the users first interaction.\nawait wallet.clearActiveAccount();\n'})})})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},11470:(e,t,n)=>{n.d(t,{A:()=>x});var o=n(96540),a=n(34164),r=n(17559),s=n(23104),l=n(56347),i=n(205),c=n(57485),u=n(31682),d=n(70679);function p(e){return o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,o.useMemo)(()=>{const e=t??function(e){return p(e).map(({props:{value:e,label:t,attributes:n,default:o}})=>({value:e,label:t,attributes:n,default:o}))}(n);return function(e){const t=(0,u.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function m({value:e,tabValues:t}){return t.some(t=>t.value===e)}function w({queryString:e=!1,groupId:t}){const n=(0,l.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(a),(0,o.useCallback)(e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})},[a,n])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=h(e),[s,l]=(0,o.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r})),[c,u]=w({queryString:n,groupId:a}),[p,g]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,a]=(0,d.Dv)(t);return[n,(0,o.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:a}),f=(()=>{const e=c??p;return m({value:e,tabValues:r})?e:null})();(0,i.A)(()=>{f&&l(f)},[f]);return{selectedValue:s,selectValue:(0,o.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)},[u,g,r]),tabValues:r}}var f=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(74848);function A({className:e,block:t,selectedValue:n,selectValue:o,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:i}=(0,s.a_)(),c=e=>{const t=e.currentTarget,a=l.indexOf(t),s=r[a].value;s!==n&&(i(t),o(s))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:r.map(({value:e,label:t,attributes:o})=>(0,v.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...o,className:(0,a.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function T({lazy:e,children:t,selectedValue:n}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===n);return e?(0,o.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function k(e){const t=g(e);return(0,v.jsxs)("div",{className:(0,a.A)(r.G.tabs.container,"tabs-container",b.tabList),children:[(0,v.jsx)(A,{...t,...e}),(0,v.jsx)(T,{...t,...e})]})}function x(e){const t=(0,f.A)();return(0,v.jsx)(k,{...e,children:p(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var o=n(34164);const a={tabItem:"tabItem_Ymn6"};var r=n(74848);function s({children:e,hidden:t,className:n}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,n),hidden:t,children:e})}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var o=n(96540);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);