"use strict";(globalThis.webpackChunkbeacon_docs=globalThis.webpackChunkbeacon_docs||[]).push([[3334],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(96540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},42214:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"blockchains/blockchain-substrate","title":"Substrate","description":"Permission Scopes","source":"@site/docs/blockchains/blockchain-substrate.md","sourceDirName":"blockchains","slug":"/blockchains/substrate","permalink":"/blockchains/substrate","draft":false,"unlisted":false,"editUrl":"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/blockchains/blockchain-substrate.md","tags":[],"version":"current","frontMatter":{"title":"Substrate","slug":"/blockchains/substrate"},"sidebar":"docs","previous":{"title":"Usage","permalink":"/blockchains/usage"},"next":{"title":"Tezos","permalink":"/blockchains/tezos"}}');var a=s(74848),i=s(28453);const r={title:"Substrate",slug:"/blockchains/substrate"},o=void 0,c={},p=[{value:"Permission Scopes",id:"permission-scopes",level:2},{value:"Message Types",id:"message-types",level:2},{value:"Messages",id:"messages",level:2},{value:"Permission Request",id:"permission-request",level:3},{value:"Permission Response",id:"permission-response",level:3},{value:"Transfer Request",id:"transfer-request",level:3},{value:"Transfer Response",id:"transfer-response",level:3},{value:"Sign Payload Request",id:"sign-payload-request",level:3},{value:"Sign Payload Response",id:"sign-payload-response",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"permission-scopes",children:"Permission Scopes"}),"\n",(0,a.jsx)(n.p,{children:"The following permission scopes are available in the Substrate package."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'export enum SubstratePermissionScope {\n  "transfer" = "transfer",\n  "sign_payload_json" = "sign_payload_json",\n  "sign_payload_raw" = "sign_payload_raw",\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"message-types",children:"Message Types"}),"\n",(0,a.jsx)(n.p,{children:"The supported message types."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'export enum SubstrateMessageType {\n  "transfer_request" = "transfer_request",\n  "sign_payload_request" = "sign_payload_request",\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"messages",children:"Messages"}),"\n",(0,a.jsx)(n.h3,{id:"permission-request",children:"Permission Request"}),"\n",(0,a.jsx)(n.p,{children:"This message is used to request permissions to use an account."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'export interface SubstratePermissionRequest\n  extends PermissionRequestV3<"substrate"> {\n  blockchainData: {\n    scopes: SubstratePermissionScope[]; // enum\n    appMetadata: AppMetadata;\n    network?: {\n      genesisHash: string; // Wallet shows only those accounts\n      rpc?: string; // For development nodes?\n    }[]; // Array to "whitelist" certain networks? (optional)\n\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"permission-response",children:"Permission Response"}),"\n",(0,a.jsx)(n.p,{children:"This message is used to share information about an account with a dApp."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'export interface SubstratePermissionResponse\n  extends PermissionResponseV3<"substrate"> {\n  blockchainData: {\n    appMetadata: AppMetadata;\n    scopes: SubstratePermissionScope[]; // enum\n    accounts: {\n      accountId: string;\n      network?: {\n        genesisHash: string;\n        rpc?: string;\n\n      publicKey: string;\n      address: string;\n    }[];\n\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"transfer-request",children:"Transfer Request"}),"\n",(0,a.jsx)(n.p,{children:"This message is used to initiate a transfer between two accounts."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'export interface SubstrateTransferRequest\n  extends BlockchainMessage<"substrate"> {\n  blockchainData: {\n    type: SubstrateMessageType.transfer_request;\n    scope: SubstratePermissionScope.transfer;\n    sourceAddress: string;\n    amount: string;\n    recipient: string;\n    network: {\n      genesisHash: string;\n      rpc?: string;\n\n    mode: "submit" | "submit-and-return" | "return"; // TODO: Wording\n\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"transfer-response",children:"Transfer Response"}),"\n",(0,a.jsx)(n.p,{children:"This message is used to share information about a requested operation with the dApp."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"export type SubstrateTransferResponse =\n  | {\n      transactionHash: string;\n    }\n  | {\n      transactionHash: string;\n      signature: string;\n      payload?: string;\n    }\n  | {\n      signature: string;\n      payload?: string;\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sign-payload-request",children:"Sign Payload Request"}),"\n",(0,a.jsx)(n.p,{children:"This message is used to request the signature for a payload."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'export interface SubstrateSignPayloadRequest\n  extends BlockchainMessage<"substrate"> {\n  blockchainData: {\n    type: SubstrateMessageType.sign_payload_request;\n    scope:\n      | SubstratePermissionScope.sign_payload_json\n      | SubstratePermissionScope.sign_payload_json;\n\n    // This type is the same as the "SignerPayloadJSON" of polkadot.js https://github.com/polkadot-js/api/blob/f169ca08a80ea9c3865dc545e03e921c50f0d284/packages/types/src/types/extrinsic.ts#L32\n    payload:\n      | {\n          type: "json";\n\n          /**\n           * @description The checkpoint hash of the block, in hex\n           */\n          blockHash: string;\n\n          /**\n           * @description The checkpoint block number, in hex\n           */\n          blockNumber: string;\n\n          /**\n           * @description The era for this transaction, in hex\n           */\n          era: string;\n\n          /**\n           * @description The genesis hash of the chain, in hex\n           */\n          genesisHash: string;\n\n          /**\n           * @description The encoded method (with arguments) in hex\n           */\n          method: string;\n\n          /**\n           * @description The nonce for this transaction, in hex\n           */\n          nonce: string;\n\n          /**\n           * @description The current spec version for the runtime\n           */\n          specVersion: string;\n\n          /**\n           * @description The tip for this transaction, in hex\n           */\n          tip: string;\n\n          /**\n           * @description The current transaction version for the runtime\n           */\n          transactionVersion: string;\n\n          /**\n           * @description The applicable signed extensions for this runtime\n           */\n          signedExtensions: string[];\n\n          /**\n           * @description The version of the extrinsic we are dealing with\n           */\n          version: number;\n        }\n      | {\n          type: "raw";\n          isMutable: boolean;\n          dataType: "bytes" | "payload";\n          data: string;\n          mode: "submit" | "submit-and-return" | "return";\n        }\n'})}),"\n",(0,a.jsx)(n.h3,{id:"sign-payload-response",children:"Sign Payload Response"}),"\n",(0,a.jsx)(n.p,{children:"This message is used to share information about a requested signature with the dApp."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"export type SubstrateSignPayloadResponse =\n  | {\n      transactionHash: string;\n    }\n  | {\n      transactionHash: string;\n      signature: string;\n      payload?: string;\n    }\n  | {\n      signature: string;\n      payload?: string;\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);