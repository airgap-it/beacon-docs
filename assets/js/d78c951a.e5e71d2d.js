"use strict";(globalThis.webpackChunkbeacon_docs=globalThis.webpackChunkbeacon_docs||[]).push([[9783],{12035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/metrics","title":"Performance Metrics","description":"Overview","source":"@site/docs/guides/metrics.mdx","sourceDirName":"guides","slug":"/guides/metrics","permalink":"/guides/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/guides/metrics.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Standalone Delegation","permalink":"/guides/standalone-delegation"},"next":{"title":"Bug Reporting","permalink":"/guides/bug-report"}}');var r=n(74848),s=n(28453);const o={},a="Performance Metrics",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Enabling Performance Metrics",id:"enabling-performance-metrics",level:2},{value:"Performance Metrics Object",id:"performance-metrics-object",level:2},{value:"Use of Performance Metrics",id:"use-of-performance-metrics",level:2},{value:"Data Collection Process",id:"data-collection-process",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"performance-metrics",children:"Performance Metrics"})}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.p,{children:"In Beacon, we have implemented a system to monitor the performance of requests made to the wallet. This system helps identifying issues related to wallet interactions. This document details the structure and purpose of the performance metrics feature."}),"\n",(0,r.jsx)(t.h2,{id:"enabling-performance-metrics",children:"Enabling Performance Metrics"}),"\n",(0,r.jsxs)(t.p,{children:["To activate performance metrics in your DApp, you need to set the ",(0,r.jsx)(t.code,{children:"enableMetrics"})," parameter to ",(0,r.jsx)(t.code,{children:"true"})," in the DAppClientOptions. Here's an example of how to enable it:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'const client = new DAppClient({\n  name: "Beacon Docs", // Name of the DApp\n  // ...\n  enableMetrics: true, // Activating performance metrics\n});\n'})}),"\n",(0,r.jsx)(t.p,{children:"Your dApp will now start collecting and transmitting data on every wallet requests"}),"\n",(0,r.jsx)(t.admonition,{type:"important",children:(0,r.jsxs)(t.p,{children:["When ",(0,r.jsx)(t.code,{children:"enableMetrics"})," is set to ",(0,r.jsx)(t.code,{children:"true"}),", an initial request is sent to our backend.\nThis serves two key purposes: verifying if the dApp is authorized to send metrics to our system and preemptively checking for any potential network issues.\nIt's crucial to note that if this initial request fails because of a Netwrok error, Beacon will automatically disable all metrics collection to prevent any operational disruptions and reliability of the metrics collection process."]})}),"\n",(0,r.jsx)(t.h2,{id:"performance-metrics-object",children:"Performance Metrics Object"}),"\n",(0,r.jsx)(t.p,{children:"For each request sent to the wallet, we record and send two key pieces of data to our backend: the initial request and the outcome of the request (successful, error, or aborted). The object transmitted contains the following fields:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'{\n    userId: string, // The unique identifier of the user making the request\n    os: string, // The operating system of the user\'s device.\n    walletName: string, // The name of the wallet being used.\n    walletType: string, // The type of wallet being interacted with, categorized as "extension", "mobile", "web", or "desktop".\n    sdkVersion: string, // The version of the SDK.\n    transport: string, // The method used for connecting to the wallet. Options include "extension", "p2p" (peer-to-peer), "walletconnect", or "website".\n    time: Date, // The timestamp when the request was made.\n    action: string, // The type of action being performed, such as "connect", "message", or "disconnect".\n    status: string // The status of the request, which can be "start", "abort", "success", or "error".\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["userId is a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"})," generated when instantiating ",(0,r.jsx)(t.code,{children:"DAppClient"}),", not on page refresh."]})}),"\n",(0,r.jsx)(t.h2,{id:"use-of-performance-metrics",children:"Use of Performance Metrics"}),"\n",(0,r.jsx)(t.p,{children:"These performance metrics are critical for several reasons:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"They enable real-time monitoring of wallet interactions, helping identify patterns or issues in user experience."}),"\n",(0,r.jsx)(t.li,{children:"Understanding how different wallet types and transports behave under various conditions helps in optimizing the application for better user experience."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"data-collection-process",children:"Data Collection Process"}),"\n",(0,r.jsx)(t.p,{children:"To collect these metrics, the application automatically wraps every wallet request with the necessary data logging. This process is run:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"When a user initiates an action with the wallet, the application logs the start of the request with the user's details and action information."}),"\n",(0,r.jsx)(t.li,{children:"When an outcome is received (success, error, or aborted)."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);