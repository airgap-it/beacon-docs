"use strict";(globalThis.webpackChunkbeacon_docs=globalThis.webpackChunkbeacon_docs||[]).push([[8082],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(96540);const a={},s=o.createContext(a);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:t},e.children)}},40549:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"getting-started/high-performance","title":"High Performance","description":"There are a few best practices dApp developers can follow to make their dApps more performant. We will go into a few of those here. Which ones are relevant to your dApp is always depending on the type of dApp. If you need help, feel free to reach out to us on Discord in the #beacon channel.","source":"@site/docs/getting-started/high-performance.mdx","sourceDirName":"getting-started","slug":"/getting-started/high-performance","permalink":"/getting-started/high-performance","draft":false,"unlisted":false,"editUrl":"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/getting-started/high-performance.mdx","tags":[],"version":"current","frontMatter":{"title":"High Performance"},"sidebar":"docs","previous":{"title":"Subscribe to ACTIVE_ACCOUNT_SET Advanced Example","permalink":"/getting-started/subscribe-to-active-account"},"next":{"title":"Active Account","permalink":"/guides/active-account"}}');var a=n(74848),s=n(28453);const i={title:"High Performance"},r=void 0,c={},l=[{value:"Make sure beacon-sdk is up to date",id:"make-sure-beacon-sdk-is-up-to-date",level:2},{value:"Reusing connected accounts",id:"reusing-connected-accounts",level:2},{value:"Connect to multiple RPCs",id:"connect-to-multiple-rpcs",level:2},{value:"Allow users to connect their Wallet early on",id:"allow-users-to-connect-their-wallet-early-on",level:2},{value:"Reduce number of requests made to RPCs",id:"reduce-number-of-requests-made-to-rpcs",level:2},{value:"Use beacon without taquito",id:"use-beacon-without-taquito",level:3},{value:"Use Caching with taquito",id:"use-caching-with-taquito",level:3},{value:"Enable caching",id:"enable-caching",level:4},{value:"Provide contract data locally",id:"provide-contract-data-locally",level:4},{value:"Local Packing",id:"local-packing",level:4},{value:"Provide fee and gas estimates",id:"provide-fee-and-gas-estimates",level:2},{value:"Check Beacon Network Status",id:"check-beacon-network-status",level:2},{value:"Reach out to the Beacon Team",id:"reach-out-to-the-beacon-team",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["There are a few best practices dApp developers can follow to make their dApps more performant. We will go into a few of those here. Which ones are relevant to your dApp is always depending on the type of dApp. If you need help, feel free to reach out to us on ",(0,a.jsx)(t.a,{href:"https://discord.gg/vuf4Gtnqh7",children:"Discord"})," in the #beacon channel."]}),"\n",(0,a.jsx)(t.h2,{id:"make-sure-beacon-sdk-is-up-to-date",children:"Make sure beacon-sdk is up to date"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"beacon-sdk"})," receives frequent updates with small bugfixes and performance improvements. We keep breaking changes to a minimum, so updating is usually as easy as increasing the version number."]}),"\n",(0,a.jsx)(t.h2,{id:"reusing-connected-accounts",children:"Reusing connected accounts"}),"\n",(0,a.jsx)(t.p,{children:"This one is a basic concept of Beacon, but still very important."}),"\n",(0,a.jsxs)(t.p,{children:['Every time a user connects their wallet and shares permission to use an account, that account is persisted on the dApp side. At this point, the UI should reflect that the user is connected and display the address that was shared. The "Connect" or "Sync" button should be replaced by a "Disconnect" or "Unsync" button. Even when the user refreshes, the account is still present and can be retrieved by calling ',(0,a.jsx)(t.code,{children:"dAppClient.getActiveAccount()"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { DAppClient } from "@airgap/beacon-sdk";\n\nconst dAppClient = new DAppClient({ name: "Beacon Docs" });\n\n// The following code should always be run during pageload if you want to show if the user is connected.\nconst activeAccount = await dAppClient.getActiveAccount();\nif (activeAccount) {\n  // User already has account connected, everything is ready\n  // You can now do an operation request, sign request, or send another permission request to switch wallet\n  console.log("Already connected:", activeAccount.address);\n  return activeAccount;\n} else {\n  // The user is not connected. A button should be displayed where the user can connect to his wallet.\n  console.error("Not connected!");\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"connect-to-multiple-rpcs",children:"Connect to multiple RPCs"}),"\n",(0,a.jsx)(t.p,{children:"If a high number of users are using your dApp at the same time, the load on the RPC can spike. Ideally, the server infrastructure should be using a load balancer and caching to handle the load. If no such infrastructure is available, it is a good idea to provide an array of nodes and randomly select one on pageload. In case one of the nodes goes down, a user can connect to a different one by refreshing."}),"\n",(0,a.jsx)(t.p,{children:"An even better approach is to add a node selection to your dApp, including a way for users to provide their own RPC."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { TezosToolkit } from "@taquito/taquito";\nimport { BeaconWallet } from "@taquito/beacon-wallet";\n\n// Define an array of nodes\nconst RPCs = ["https://mainnet.api.tez.ie"];\n\n// Select random node from array\nconst randomRpc = RPCs[Math.floor(RPCs.length * Math.random())];\n\nconst Tezos = new TezosToolkit(randomRpc);\nconst wallet = new BeaconWallet({ name: "Beacon Docs" }); // Takes the same arguments as the DAppClient constructor\n\nTezos.setWalletProvider(wallet);\n'})}),"\n",(0,a.jsx)(t.h2,{id:"allow-users-to-connect-their-wallet-early-on",children:"Allow users to connect their Wallet early on"}),"\n",(0,a.jsx)(t.p,{children:"In case your dApp is focussed around a specific time (eg. NFT drop or a countdown of some sorts), you should already provide a way for users to pair their wallet with the dApp. This will reduce the load on the Beacon Network once the countdown hits 0."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { DAppClient } from "@airgap/beacon-sdk";\n\nconst dAppClient = new DAppClient({ name: "Beacon Docs" });\n\ntry {\n  console.log("Requesting permissions...");\n  const permissions = await dAppClient.requestPermissions();\n  console.log("Got permissions:", permissions.address);\n} catch (error) {\n  console.error("Got error:", error);\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"reduce-number-of-requests-made-to-rpcs",children:"Reduce number of requests made to RPCs"}),"\n",(0,a.jsx)(t.p,{children:"Whenever doing a call in taquito, it internally has to fetch data from the chain. Under normal circumstances, those requests are not a big deal. But if a high number of users are using your dApp at the same time, those requests can become a problem for the RPCs."}),"\n",(0,a.jsx)(t.h3,{id:"use-beacon-without-taquito",children:"Use beacon without taquito"}),"\n",(0,a.jsxs)(t.p,{children:["When the ",(0,a.jsx)(t.code,{children:"beacon-sdk"})," is used without taquito, no connection to any RPC is required. So if your dApp offers only simple functionality (eg. only calling the ",(0,a.jsx)(t.code,{children:"mint"})," entrypoint with one parameter), it is more performant to construct the contract call yourself and send it to the Beacon Network direcly, without going through taquito first."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'const result = await dAppClient.requestOperation({\n  operationDetails: [\n    {\n      kind: TezosOperationType.TRANSACTION,\n      amount: "0",\n      destination: NFT_CONTRACT,\n      parameters: {\n        entrypoint: "mint",\n        value: {\n          int: 3,\n        },\n      },\n    },\n  ],\n});\n'})}),"\n",(0,a.jsxs)(t.p,{children:["See a full example ",(0,a.jsx)(t.a,{href:"/guides/simple-contract-call",children:"here"})]}),"\n",(0,a.jsx)(t.h3,{id:"use-caching-with-taquito",children:"Use Caching with taquito"}),"\n",(0,a.jsx)(t.p,{children:"Taquito offers a couple of optional features to reduce the number of network requests."}),"\n",(0,a.jsx)(t.h4,{id:"enable-caching",children:"Enable caching"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { TezosToolkit } from "@taquito/taquito";\nimport { RpcClient, RpcClientCache } from "@taquito/rpc";\n\nconst rpc = new RpcClientCache(new RpcClient(RPC_URL));\nthis.tezos = new TezosToolkit(rpc);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["More information in the official ",(0,a.jsx)(t.a,{href:"https://tezostaquito.io/docs/rpc-cache",children:"Taquito RPC Caching Docs"})]}),"\n",(0,a.jsx)(t.h4,{id:"provide-contract-data-locally",children:"Provide contract data locally"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { TezosToolkit } from "@taquito/taquito";\nimport { ContractsLibrary } from "@taquito/contracts-library";\n\nconst contractsLibrary = new ContractsLibrary();\n\nconst contractInfo = {}; // A JSON file of the contract data.\ncontractsLibrary.addContract(contractInfo);\n\nconst Tezos = new TezosToolkit(RPC_URL);\nTezos.addExtension(contractsLibrary);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["More information in the official ",(0,a.jsx)(t.a,{href:"https://tezostaquito.io/docs/contracts-library",children:"Taquito Contracts Library Docs"})]}),"\n",(0,a.jsx)(t.h4,{id:"local-packing",children:"Local Packing"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { TezosToolkit } from "@taquito/taquito";\nimport { MichelCodecPacker } from "@taquito/taquito";\n\nconst Tezos = new TezosToolkit(RPC_URL);\nTezos.setPackerProvider(new MichelCodecPacker());\n'})}),"\n",(0,a.jsxs)(t.p,{children:["More information in the official ",(0,a.jsx)(t.a,{href:"https://tezostaquito.io/docs/maps_bigmaps/#local-packing-for-big-maps",children:"Taquito Local Packing Docs"})]}),"\n",(0,a.jsx)(t.h2,{id:"provide-fee-and-gas-estimates",children:"Provide fee and gas estimates"}),"\n",(0,a.jsxs)(t.p,{children:["Depending on the contract that is used on your dApp, the ",(0,a.jsx)(t.code,{children:"storage_limit"})," or ",(0,a.jsx)(t.code,{children:"gas_limit"})," can change with each contract call. This means if multiple people are interacting with the contract in the same block, it is possible that operations will fail because the previously estimated values are no longer correct."]}),"\n",(0,a.jsxs)(t.p,{children:["The contract developer should be able to give rough estimates of what the ",(0,a.jsx)(t.code,{children:"storage_limit"})," and ",(0,a.jsx)(t.code,{children:"gas_limit"})," should be. If they change frequently, the dApp should provide a preset for those parameters. Beacon will send those presets to the Wallet, which will take them into consideration when preparing the operation."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'const result = await dAppClient.requestOperation({\n  operationDetails: [\n    {\n      kind: TezosOperationType.TRANSACTION,\n      amount: "1",\n      destination: recipientAddress,\n      fee: "10000", // Set this depending on your contract\n      gas_limit: "10000", // Set this depending on your contract\n      storage_limit: "1000", // Set this depending on your contract\n    },\n  ],\n});\n'})}),"\n",(0,a.jsx)(t.h2,{id:"check-beacon-network-status",children:"Check Beacon Network Status"}),"\n",(0,a.jsxs)(t.p,{children:["You can check the performance of the Beacon Network here in our ",(0,a.jsx)(t.a,{href:"https://status.walletbeacon.io",children:"Dashboard"}),". If you see spikes, it is possible that performance is affected. Usually, the network recovers once the load reduces."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["When using Browser Extension wallets (eg. Temple or Spire), the status of the Beacon Network does ",(0,a.jsx)(t.strong,{children:"NOT"})," affect the connection to the wallet. If something doesn't work in conjunction with Temple or Spire, it is most likely the RPC of the dApp or Wallet."]})}),"\n",(0,a.jsx)(t.h2,{id:"reach-out-to-the-beacon-team",children:"Reach out to the Beacon Team"}),"\n",(0,a.jsxs)(t.p,{children:["If you have any questions or doubts about the integration of Beacon on your dApp, feel free to reach out to us on ",(0,a.jsx)(t.a,{href:"https://discord.gg/vuf4Gtnqh7",children:"Discord"})," in the #beacon channel. If are developing a dApp with a scheduled event, please contact us in advance so we have enough time to help you prepare for the release."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);