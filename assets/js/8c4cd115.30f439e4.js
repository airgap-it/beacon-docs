"use strict";(globalThis.webpackChunkbeacon_docs=globalThis.webpackChunkbeacon_docs||[]).push([[8164],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},90668:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"wallet/getting-started/web/getting-started","title":"Getting Started","description":"First, you need to install the beacon-sdk package.","source":"@site/docs/wallet/getting-started/web/getting-started.mdx","sourceDirName":"wallet/getting-started/web","slug":"/wallet/getting-started/web/getting-started","permalink":"/wallet/getting-started/web/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/wallet/getting-started/web/getting-started.mdx","tags":[],"version":"current","frontMatter":{"title":"Getting Started"},"sidebar":"wallet","next":{"title":"Installation","permalink":"/wallet/getting-started/android/installation"}}');var a=t(74848),o=t(28453);const r={title:"Getting Started"},i=void 0,c={},l=[];function d(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["First, you need to install the ",(0,a.jsx)(n.code,{children:"beacon-sdk"})," package."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"npm install --save @airgap/beacon-sdk"})}),"\n",(0,a.jsx)(n.p,{children:"After that you need to import the Beacon SDK in your code and initialize the WalletClient."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"beacon-sdk"})," will automatically establish a connection and listen to all Beacon messages."]}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsx)(n.p,{children:"The RPC URL that is provided by the dApp can be an insecure http:// connection. The reason for this is because it allows for easy development with a local node, without setting up a local SSL certificate."}),(0,a.jsx)(n.p,{children:"Especially the wallet should care about this and potentially show a warning to the user if the RPC URL is not a secure https:// URL."})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import {\n  WalletClient,\n  BeaconMessageType,\n  PermissionScope,\n  PermissionResponseInput,\n} from "@airgap/beacon-sdk";\n\nconst connectApp = async (): Promise<void> => {\n  // Only ONE WalletClient should be created and reused everywhere.\n  const client = new WalletClient({ name: "My Wallet" });\n  await client.init(); // Establish P2P connection\n\n  client\n    .connect(async (message) => {\n      console.log("beacon message", message);\n      let response: BeaconResponseInputMessage;\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n          // Prompt user for permissions. If multiple accounts are available, let user choose one of them\n          response = {\n            type: BeaconMessageType.PermissionResponse,\n            network: message.network, // Use the same network that the user requested\n            scopes: message.scopes,\n            id: message.id,\n            publicKey:\n              "3b92229274683b311cf8b040cf91ac0f8e19e410f06eda5537ef077e718e0024"\n          }\n\n          // Optional\n          // If the user aborts an action at any time, you can send back an error:\n          response = {\n            type: BeaconMessageType.Error,\n            id: message.id,\n            errorType: BeaconErrorType.ABORTED_ERROR\n          }\n          break;\n        case BeaconMessageType.SignPayloadRequest:\n          // Sign message.payload and return signature\n          response = {\n            type: BeaconMessageType.SignPayloadResponse,\n            id: message.id,\n            signingType: message.signingType,\n            signature: "edsig..."\n          }\n          break;\n        case BeaconMessageType.OperationRequest:\n          // Prepare transaction based on the details give in message.operationDetails\n          // message.operationDetails only contains a partial tezos transaction. Not all fields are mandatory\n          // The fields that are not present (eg. counter, fee, gas_limit) have to be set by the wallet\n          // If one of the optional fields is set, then that one should be used and not replaced by the wallet\n          response = {\n            type: BeaconMessageType.OperationResponse,\n            id: message.id,\n            transactionHash: "op..."\n          }\n\n          // Optional\n          // If the transaction cannot be prepared, (eg. run_operations fails), an error containing the rpc error can be returned\n          let error = [\n            {\n              kind: "temporary",\n              id: "proto.008-PtEdo2Zk.contract.balance_too_low",\n              contract: "tz1...",\n              balance: "100",\n              amount: "200"\n            },\n          ]; // RPC error\n          response = {\n            type: BeaconMessageType.Error,\n            id: message.id,\n            errorType: BeaconErrorType.TRANSACTION_INVALID_ERROR,\n            errorData: error\n          }\n          break;\n        case BeaconMessageType.BroadcastRequest:\n          response = {\n            type: BeaconMessageType.OperationResponse,\n            id: message.id,\n            transactionHash: "op..."\n          }\n          break;\n        default:\n          response = {\n            type: BeaconMessageType.Error,\n            id: message.id,\n            errorType: BeaconErrorType.ABORTED_ERROR\n          }\n      }\n\n      client.respond(response);\n    })\n    .catch((error) => console.error("connect error", error));\n\n  connectApp().catch((error) => console.error("connect error", error));\n'})}),"\n",(0,a.jsx)(n.p,{children:"By adding the code above, our app is now ready to receive messages. Now all that is left for us to do is connecting to a dApp."}),"\n",(0,a.jsx)(n.p,{children:"To establish a connection over the P2P network, a handshake message has to be given from the dApp to the wallet. How this is done depends on the platform.\nIt can be through QR scanning, Deeplinks or Copy-Pasting the handshake message. Once the handshake is received, the new peer has to be added:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const isBeaconMessage: (obj: unknown) => obj is P2PPairingRequest = (\n  obj: unknown,\n): obj is P2PPairingRequest => {\n  return (\n    typeof (obj as P2PPairingRequest).name === "string" &&\n    typeof (obj as P2PPairingRequest).publicKey === "string" &&\n    typeof (obj as P2PPairingRequest).relayServer === "string"\n  );\n\n\nconst handshakeMessage = ""; // This was received from the dApp, eg. through QR scanning or deeplink\n\nconst deserialized = await new Serializer().deserialize(handshakeMessage);\n\nif (isBeaconMessage(deserialized)) {\n  // This will add the peer and establish a connection\n  client.addPeer(peerInfo);\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"That's it, now the dApp and the Wallet are connected."}),"\n",(0,a.jsxs)(n.p,{children:["There are some additional features that the ",(0,a.jsx)(n.code,{children:"WalletClient"})," provides, such as ",(0,a.jsx)(n.code,{children:"client.getPermissions()"})," or ",(0,a.jsx)(n.code,{children:"client.getPeers()"})," to listing all the connected peers and permissions that were granted to dApps."]}),"\n",(0,a.jsxs)(n.p,{children:["Using ",(0,a.jsx)(n.code,{children:"client.removePeer(peer)"})," the wallet can disconnect from a peer. If this is done, the dApp will receive a message that the wallet has disconnected."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);