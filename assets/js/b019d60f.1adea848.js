"use strict";(globalThis.webpackChunkbeacon_docs=globalThis.webpackChunkbeacon_docs||[]).push([[4839],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var a=s(96540);const t={},i=a.createContext(t);function c(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),a.createElement(i.Provider,{value:n},e.children)}},33108:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"blockchains/introduction","title":"Introduction","description":"Since the release of beacon-sdk version 3.0, Beacon supports multiple blockchains.","source":"@site/docs/blockchains/introduction.md","sourceDirName":"blockchains","slug":"/blockchains/introduction","permalink":"/blockchains/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/blockchains/introduction.md","tags":[],"version":"current","frontMatter":{"title":"Introduction","slug":"/blockchains/introduction"},"sidebar":"docs","previous":{"title":"P2P Extension","permalink":"/advanced/flows/p2p-extension"},"next":{"title":"Usage","permalink":"/blockchains/usage"}}');var t=s(74848),i=s(28453);const c={title:"Introduction",slug:"/blockchains/introduction"},o=void 0,r={},l=[{value:"Structure",id:"structure",level:3},{value:"Wrapper",id:"wrapper",level:4},{value:"Blockchain Message",id:"blockchain-message",level:4},{value:"Permission Message",id:"permission-message",level:4},{value:"Request / Response",id:"request--response",level:4}];function d(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Since the release of ",(0,t.jsx)(n.code,{children:"beacon-sdk"})," version 3.0, Beacon supports multiple blockchains."]}),"\n",(0,t.jsx)(n.p,{children:"Currently, 3 separate blockchain packages are available:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Substrate (@airgap/beacon-blockchain-substrate)"}),"\n",(0,t.jsx)(n.li,{children:"Tezos (@airgap/beacon-blockchain-tezos)"}),"\n",(0,t.jsx)(n.li,{children:"Tezos Sapling (@airgap/beacon-blockchain-tezos-sapling)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"structure",children:"Structure"}),"\n",(0,t.jsx)(n.p,{children:"Every blockchain can define their own messages. Those messages are then wrapped in a message with additional metadata from the beacon protocol."}),"\n",(0,t.jsx)(n.p,{children:"See the docs about the individual packages for more information about the messages specific to certain blockchains."}),"\n",(0,t.jsx)(n.h4,{id:"wrapper",children:"Wrapper"}),"\n",(0,t.jsx)(n.p,{children:"In the Beacon protocol, every message is wrapped in the following wrapper."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface BeaconMessageWrapper<T extends BeaconBaseMessage> {\n  id: string; // ID of the message. The same ID is used in the request and response\n  version: string;\n  senderId: string; // ID of the sender. This is used to identify the\n  message: T;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"blockchain-message",children:"Blockchain Message"}),"\n",(0,t.jsx)(n.p,{children:"The layout for the basic message is the same for all blockchains."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface BlockchainMessage<T extends string = string> {\n  blockchainIdentifier: T;\n  type: unknown;\n  blockchainData: unknown;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"permission-message",children:"Permission Message"}),"\n",(0,t.jsx)(n.p,{children:"One core concept of Beacon is that as a first step (after establishing the connection), the dApp needs to request permissions to receive information about accounts and execute certain actions."}),"\n",(0,t.jsxs)(n.p,{children:["For this reason, there are two messages, ",(0,t.jsx)(n.code,{children:"PermissionRequest"})," and ",(0,t.jsx)(n.code,{children:"PermissionResponse"}),", that are used to do the permission management."]}),"\n",(0,t.jsxs)(n.p,{children:["Those messages are handled differently from the generic ",(0,t.jsx)(n.code,{children:"BlockchainRequest"})," and ",(0,t.jsx)(n.code,{children:"BlockchainResponse"})," messages because they have to be completed first before any other action can take place."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface PermissionRequestV3<T extends string = string>\n  extends BlockchainMessage<T> {\n  blockchainIdentifier: T;\n  type: BeaconMessageType.PermissionRequest;\n  blockchainData: {\n    appMetadata: AppMetadata; // Some additional information about the dApp\n    scopes: string[];\n\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface PermissionResponseV3<T extends string = string>\n  extends BlockchainMessage<T> {\n  blockchainIdentifier: T;\n  type: BeaconMessageType.PermissionResponse;\n  blockchainData: {\n    appMetadata: AppMetadata; // Some additional information about the Wallet\n    scopes: string[]; // Permissions that have been granted for this specific address / account\n\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"request--response",children:"Request / Response"}),"\n",(0,t.jsx)(n.p,{children:"Following are the generic messages of the Beacon Protocol. They can be extended by every blockchain to add blockchain specific data and behaviour."}),"\n",(0,t.jsx)(n.p,{children:"Please see the docs about the specific blockchain messages for examples."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface BlockchainRequestV3<T extends string = string>\n  extends BlockchainMessage<T> {\n  blockchainIdentifier: T;\n  type: BeaconMessageType.BlockchainRequest;\n  accountId: string;\n  blockchainData: {\n    type: string;\n    scope: string;\n\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export interface BlockchainResponseV3<T extends string = string>\n  extends BlockchainMessage<T> {\n  blockchainIdentifier: T;\n  type: BeaconMessageType.BlockchainResponse;\n  // accountId is not present, because it can be fetched from the request\n  blockchainData: unknown;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);